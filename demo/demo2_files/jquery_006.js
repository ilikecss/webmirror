/*! tinyscrollbar - v2.0.0 - 2014-01-06
 * http://www.baijs.com/tinyscrollbar
 *
 * Copyright (c) 2014 Maarten Baijs <wieringen@gmail.com>;
 * Licensed under the MIT license */

(function (factory) { typeof define == "function" && define.amd ? define(["jquery"], factory) : typeof exports == "object" ? factory(require("jquery")) : factory(jQuery) })(function ($) { function Plugin($container, options) { function initialize() { return self.update(), setEvents(), self } function setSize() { $thumb.css(posiLabel, self.contentPosition / self.trackRatio), $overview.css(posiLabel, -self.contentPosition), $scrollbar.css(sizeLabel, self.trackSize), $track.css(sizeLabel, self.trackSize), $thumb.css(sizeLabel, self.thumbSize) } function setEvents() { hasTouchEvents ? $viewport[0].ontouchstart = function (event) { 1 === event.touches.length && (start(event.touches[0]), event.stopPropagation()) } : ($thumb.bind("mousedown", start), $track.bind("mouseup", drag)), self.options.wheel && window.addEventListener ? ($container[0].addEventListener("DOMMouseScroll", wheel, !1), $container[0].addEventListener("mousewheel", wheel, !1)) : self.options.wheel && ($container[0].onmousewheel = wheel) } function start(event) { $("body").addClass("noSelect"), mousePosition = isHorizontal ? event.pageX : event.pageY, self.thumbPosition = parseInt($thumb.css(posiLabel), 10) || 0, hasTouchEvents ? (document.ontouchmove = function (event) { event.preventDefault(), drag(event.touches[0]) }, document.ontouchend = end) : ($(document).bind("mousemove", drag), $(document).bind("mouseup", end), $thumb.bind("mouseup", end)) } function wheel(event) { if (self.contentRatio < 1) { var eventObject = event || window.event, wheelSpeedDelta = eventObject.wheelDelta ? eventObject.wheelDelta / 120 : -eventObject.detail / 3; self.contentPosition -= wheelSpeedDelta * self.options.wheelSpeed, self.contentPosition = Math.min(self.contentSize - self.viewportSize, Math.max(0, self.contentPosition)), $container.trigger("move"), $thumb.css(posiLabel, self.contentPosition / self.trackRatio), $overview.css(posiLabel, -self.contentPosition); if (self.options.wheelLock || self.contentPosition !== self.contentSize - self.viewportSize && self.contentPosition !== 0) eventObject = $.event.fix(eventObject), eventObject.preventDefault() } } function drag(event) { if (self.contentRatio < 1) { var mousePositionNew = isHorizontal ? event.pageX : event.pageY, thumbPositionDelta = mousePositionNew - mousePosition; self.options.scrollInvert && hasTouchEvents && (thumbPositionDelta = mousePosition - mousePositionNew); var thumbPositionNew = Math.min(self.trackSize - self.thumbSize, Math.max(0, self.thumbPosition + thumbPositionDelta)); self.contentPosition = thumbPositionNew * self.trackRatio, $container.trigger("move"), $thumb.css(posiLabel, thumbPositionNew), $overview.css(posiLabel, -self.contentPosition) } } function end() { $("body").removeClass("noSelect"), $(document).unbind("mousemove", drag), $(document).unbind("mouseup", end), $thumb.unbind("mouseup", end), document.ontouchmove = document.ontouchend = null } this.options = $.extend({}, defaults, options), this._defaults = defaults, this._name = pluginName; var self = this, $viewport = $container.find(".viewport"), $overview = $container.find(".overview"), $scrollbar = $container.find(".scrollbar"), $track = $scrollbar.find(".track"), $thumb = $scrollbar.find(".thumb"), mousePosition = 0, isHorizontal = this.options.axis === "x", hasTouchEvents = "ontouchstart" in document.documentElement, sizeLabel = isHorizontal ? "width" : "height", posiLabel = isHorizontal ? "left" : "top"; return this.contentPosition = 0, this.viewportSize = 0, this.contentSize = 0, this.contentRatio = 0, this.trackSize = 0, this.trackRatio = 0, this.thumbSize = 0, this.thumbPosition = 0, this.update = function (scrollTo) { var sizeLabelCap = sizeLabel.charAt(0).toUpperCase() + sizeLabel.slice(1).toLowerCase(); this.viewportSize = $viewport[0]["offset" + sizeLabelCap], this.contentSize = $overview[0]["scroll" + sizeLabelCap], this.contentRatio = this.viewportSize / this.contentSize, this.trackSize = this.options.trackSize || this.viewportSize, this.thumbSize = Math.min(this.trackSize, Math.max(0, this.options.thumbSize || this.trackSize * this.contentRatio)), this.trackRatio = this.options.thumbSize ? (this.contentSize - this.viewportSize) / (this.trackSize - this.thumbSize) : this.contentSize / this.trackSize, $scrollbar.toggleClass("disable", this.contentRatio >= 1); switch (scrollTo) { case "bottom": this.contentPosition = this.contentSize - this.viewportSize; break; case "relative": this.contentPosition = Math.min(this.contentSize - this.viewportSize, Math.max(0, this.contentPosition)); break; default: this.contentPosition = parseInt(scrollTo, 10) || 0 } setSize() }, initialize() } var pluginName = "tinyscrollbar", defaults = { "axis": "y", "wheel": !0, "wheelSpeed": 40, "wheelLock": !0, "scrollInvert": !1, "trackSize": !1, "thumbSize": !1 }; $.fn[pluginName] = function (options) { return this.each(function () { $.data(this, "plugin_" + pluginName) || $.data(this, "plugin_" + pluginName, new Plugin($(this), options)) }) } })